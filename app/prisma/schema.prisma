// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model AdminUser {
    id          String    @id
    displayName String?
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    lastSeen    DateTime?

    AdminOAuthAllowList AdminOAuthAllowList?
    AdminCredential     AdminCredential?
}

// 2bttns specific models
model AdminOAuthAllowList {
    email     String   @id
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    AdminUser AdminUser? @relation(fields: [email], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model AdminCredential {
    // Admin username-password credentials for use by the Auth.js credentials provider
    username       String   @id
    hashedPassword String
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt

    AdminUser AdminUser? @relation(fields: [username], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Game {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    name        String
    description String?

    defaultNumItemsPerRound Int?

    mode           String
    modeConfigJson String?

    inputTags Tag[]
}

model GameObject {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    name        String
    description String?

    tags                       Tag[]
    PlayerScore                PlayerScore[]
    ToGameObjectRelationship   GameObjectRelationship[] @relation("toGameObject")
    FromGameObjectRelationship GameObjectRelationship[] @relation("fromGameObject")
}

model Tag {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    name        String
    description String?

    gameObjects  GameObject[]
    inputToGames Game[]
}

// Secret keys for dev app access
model Secret {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    name        String?
    description String?
    secret      String
}

model Player {
    id          String        @id
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    name        String?
    PlayerScore PlayerScore[]
}

model PlayerScore {
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    score        Decimal
    playerId     String
    gameObjectId String

    player     Player     @relation(fields: [playerId], references: [id], onDelete: Cascade)
    gameObject GameObject @relation(fields: [gameObjectId], references: [id], onDelete: Cascade)

    @@id([playerId, gameObjectId])
}

model Weight {
    id                     String                   @id @default(cuid())
    createdAt              DateTime                 @default(now())
    updatedAt              DateTime                 @updatedAt
    name                   String?
    description            String?
    weight                 Decimal
    GameObjectRelationship GameObjectRelationship[]
}

model GameObjectRelationship {
    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt
    weightId         String
    fromGameObjectId String
    toGameObjectId   String

    weight         Weight     @relation(fields: [weightId], references: [id], onDelete: Cascade)
    fromGameObject GameObject @relation(fields: [fromGameObjectId], references: [id], onDelete: Cascade, name: "fromGameObject")
    toGameObject   GameObject @relation(fields: [toGameObjectId], references: [id], onDelete: Cascade, name: "toGameObject")

    @@id([fromGameObjectId, toGameObjectId])
}
