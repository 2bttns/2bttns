import { useQuery } from "@tanstack/react-query";
import Head from "next/head";
import { twobttns } from "./utils/2bttns";

import { ApiResponses } from "@2bttns/sdk";
import { useState } from "react";
import Select from "react-select";

const getPlayers = twobttns.api.path("/players").method("get").create();
const getTags = twobttns.api.path("/tags").method("get").create();

type TwoBttnsPlayer =
  ApiResponses["/players"]["get"]["responses"]["200"]["content"]["application/json"]["players"][number];

type TwoBttnsTag =
  ApiResponses["/tags"]["get"]["responses"]["200"]["content"]["application/json"]["tags"][number];

export default function Home() {
  const redirectToGame = () => {
    if (typeof window === "undefined") {
      return;
    }
    const game_id = window.prompt("Enter game id");
    if (!game_id) return;
    const user_id = window.prompt(
      "Enter user id (random strings are fine for now)"
    );
    if (!user_id) return;
    let num_items: any = window.prompt(
      "Enter #items (ALL for all items; or leave blank to use the configured default)"
    );

    const queryParams = new URLSearchParams();
    queryParams.append("game_id", game_id);
    queryParams.append("user_id", user_id);
    if (num_items) {
      if (num_items.toUpperCase() === "ALL") {
        num_items = "ALL";
      } else if (!isNaN(parseInt(num_items))) {
        num_items = parseInt(num_items);

        if (num_items < 1) {
          window.alert(`Invalid value: num_items=${num_items}`);
          return;
        }
      } else {
        window.alert(`Invalid value: num_items=${num_items}`);
        return;
      }

      if (num_items) {
        queryParams.append("num_items", num_items);
      }
    }
    queryParams.append("callback_url", `${window.location.href}/results`);

    window.location.href = `/api/play2bttns?${queryParams.toString()}`;
  };

  const twobttnsPlayersQuery = useQuery({
    queryKey: ["players"],
    queryFn: async () => {
      const players = await getPlayers({});
      return players.data.players;
    },
  });

  const twobttnsTagsQuery = useQuery({
    queryKey: ["tags"],
    queryFn: async () => {
      const players = await getTags({});
      return players.data.tags;
    },
  });

  const [selectedPlayer, setSelectedPlayer] = useState<TwoBttnsPlayer["id"]>();
  const [selectedInputTags, setSelectedInputTags] = useState<
    TwoBttnsTag["id"][]
  >([]);
  const [selectedOutputTag, setSelectedOutputTag] =
    useState<TwoBttnsTag["id"]>();

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <button onClick={redirectToGame}>To Game</button>

        <h1>See Results</h1>
        <div style={{ border: "1px solid black", padding: "1rem" }}>
          <p style={{ fontWeight: "bold" }}>Player</p>
          <Select
            options={twobttnsPlayersQuery.data?.map((tag) => ({
              value: tag.id,
              label: tag.name,
            }))}
            onChange={(selected) => {
              setSelectedPlayer(selected?.value as TwoBttnsPlayer["id"]);
            }}
            isSearchable
          />

          <p style={{ fontWeight: "bold" }}>
            Input Tags{" "}
            <span style={{ fontWeight: "normal", fontStyle: "italic" }}>
              (multi-select allowed)
            </span>
          </p>
          <Select
            options={twobttnsTagsQuery.data?.map((tag) => ({
              value: tag.id,
              label: tag.name,
            }))}
            onChange={(selected) => {
              setSelectedInputTags(
                selected.map((s) => s.value as TwoBttnsTag["id"])
              );
            }}
            isMulti
            closeMenuOnSelect={false}
            isSearchable
          />

          <p style={{ fontWeight: "bold" }}>Output Tag</p>
          <Select
            options={twobttnsTagsQuery.data?.map((tag) => ({
              value: tag.id,
              label: tag.name,
            }))}
            onChange={(selected) => {
              setSelectedOutputTag(selected?.value as TwoBttnsTag["id"]);
            }}
            isSearchable
          />
        </div>
      </main>
    </>
  );
}
