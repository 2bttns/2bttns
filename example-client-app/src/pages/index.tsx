import { useQuery } from "@tanstack/react-query";
import Head from "next/head";
import {
  TwoBttnsPlayer,
  TwoBttnsRankedOutput,
  TwoBttnsTag,
  getPlayers,
  getRanked,
  getTags,
} from "./utils/2bttns";

import { useEffect, useState } from "react";
import Select from "react-select";

export default function Home() {
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <PlayGameButton />
        <hr />
        <ViewResults />
      </main>
    </>
  );
}

function PlayGameButton() {
  const redirectToGame = () => {
    if (typeof window === "undefined") {
      return;
    }
    const game_id = window.prompt("Enter game id");
    if (!game_id) return;
    const user_id = window.prompt(
      "Enter user id (random strings are fine for now)"
    );
    if (!user_id) return;
    let num_items: any = window.prompt(
      "Enter #items (ALL for all items; or leave blank to use the configured default)"
    );

    const queryParams = new URLSearchParams();
    queryParams.append("game_id", game_id);
    queryParams.append("user_id", user_id);
    if (num_items) {
      if (num_items.toUpperCase() === "ALL") {
        num_items = "ALL";
      } else if (!isNaN(parseInt(num_items))) {
        num_items = parseInt(num_items);

        if (num_items < 1) {
          window.alert(`Invalid value: num_items=${num_items}`);
          return;
        }
      } else {
        window.alert(`Invalid value: num_items=${num_items}`);
        return;
      }

      if (num_items) {
        queryParams.append("num_items", num_items);
      }
    }
    queryParams.append("callback_url", `${window.location.href}/`);

    window.location.href = `/api/play2bttns?${queryParams.toString()}`;
  };
  return <button onClick={redirectToGame}>To Game</button>;
}

function ViewResults() {
  const [selectedPlayer, setSelectedPlayer] = useState<TwoBttnsPlayer["id"]>();
  const [selectedInputTags, setSelectedInputTags] = useState<
    TwoBttnsTag["id"][]
  >([]);
  const [selectedOutputTag, setSelectedOutputTag] =
    useState<TwoBttnsTag["id"]>();
  const [rankedOutput, setRankedOutput] = useState<TwoBttnsRankedOutput>();

  const twobttnsPlayersQuery = useQuery({
    queryKey: ["players"],
    queryFn: async () => {
      const players = await getPlayers({});
      return players.data.players;
    },
  });

  const twobttnsTagsQuery = useQuery({
    queryKey: ["tags"],
    queryFn: async () => {
      const players = await getTags({});
      return players.data.tags;
    },
  });

  const hasRequiredInputs =
    !!selectedPlayer && selectedInputTags.length > 0 && !!selectedOutputTag;

  const twobttnsGetRankedQuery = useQuery({
    queryKey: ["getRanked"],
    queryFn: async () => {
      const rankedResults = await getRanked({
        inputTags: selectedInputTags.join(","),
        outputTag: selectedOutputTag!,
        playerId: selectedPlayer!,
      });
      return rankedResults.data;
    },
    enabled: hasRequiredInputs,
    onSuccess: (data) => {
      setRankedOutput(data);
    },
  });

  useEffect(() => {
    if (!hasRequiredInputs) return;
    twobttnsGetRankedQuery.refetch();
  }, [selectedPlayer, JSON.stringify(selectedInputTags), selectedOutputTag]);

  return (
    <div>
      <h1>View Results</h1>
      <div style={{ border: "1px solid black", padding: "1rem" }}>
        <p style={{ fontWeight: "bold" }}>Player</p>
        <Select
          options={twobttnsPlayersQuery.data?.map((tag) => ({
            value: tag.id,
            label: tag.name ?? tag.id,
          }))}
          onChange={(selected) => {
            setSelectedPlayer(selected?.value as TwoBttnsPlayer["id"]);
          }}
          isSearchable
        />

        <p style={{ fontWeight: "bold" }}>
          Input Tags{" "}
          <span style={{ fontWeight: "normal", fontStyle: "italic" }}>
            (multi-select allowed)
          </span>
        </p>
        <Select
          options={twobttnsTagsQuery.data?.map((tag) => ({
            value: tag.id,
            label: tag.name ?? tag.id,
          }))}
          onChange={(selected) => {
            setSelectedInputTags(
              selected.map((s) => s.value as TwoBttnsTag["id"])
            );
          }}
          isMulti
          closeMenuOnSelect={false}
          isSearchable
        />

        <p style={{ fontWeight: "bold" }}>Output Tag</p>
        <Select
          options={twobttnsTagsQuery.data?.map((tag) => ({
            value: tag.id,
            label: tag.name ?? tag.id,
          }))}
          onChange={(selected) => {
            setSelectedOutputTag(selected?.value as TwoBttnsTag["id"]);
          }}
          isSearchable
        />
        <hr />
        <p style={{ fontWeight: "bold" }}>Ranked Output</p>
        {!rankedOutput && <p>Waiting for inputs...</p>}
        {rankedOutput && <pre>{JSON.stringify(rankedOutput, null, 2)}</pre>}
      </div>
    </div>
  );
}
