/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/example/hello": {
    /**
     * Say hello 
     * @description Say hello to the world
     */
    get: operations["query.example.hello"];
  };
  "/example/create": {
    /**
     * Create example 
     * @description Create an example object in the database
     */
    post: operations["mutation.example.create"];
  };
  "/example/getAll": {
    /**
     * Get all examples 
     * @description Get all examples
     */
    get: operations["query.example.getAll"];
  };
  "/example/getSecretMessage": {
    /**
     * Get secret message 
     * @description This endpoint will return a message that tells you what type of authentication you used, if you are authenticated.
     */
    get: operations["query.example.getSecretMessage"];
  };
  "/games": {
    /**
     * Get All Games 
     * @description Get all Games. Paginated by default. Supports filtering and sorting.
     */
    get: operations["query.games.getAll"];
    /**
     * Delete Games 
     * @description Delete one or more Games by their IDs
     */
    delete: operations["mutation.games.delete"];
  };
  "/games/count": {
    /**
     * Get Game Count 
     * @description Get Game Count
     */
    get: operations["query.games.getCount"];
  };
  "/games/getPlayerScores": {
    /**
     * Get Player Scores 
     * @description Get a player's score data for a specific game
     */
    get: operations["query.games.getPlayerScores"];
  };
  "/game-objects": {
    /**
     * Get All Game Objects 
     * @description Get all Game Objects. Paginated by default. Supports filtering and sorting.
     */
    get: operations["query.gameObjects.getAll"];
    /**
     * Delete Game Objects 
     * @description Delete one or more game objects by their IDs
     */
    delete: operations["mutation.gameObjects.delete"];
  };
  "/game-objects/count": {
    /**
     * Get Game Object Count 
     * @description Get the total Game Object count. Supports filtering.
     */
    get: operations["query.gameObjects.getCount"];
  };
  "/game-objects/ranked": {
    /**
     * Get Ranked Results 
     * @description Get ranked Game Object results for a player
     */
    get: operations["query.gameObjects.getRanked"];
  };
  "/tags": {
    /**
     * Get All Tags 
     * @description Get all tags
     */
    get: operations["query.tags.getAll"];
    /**
     * Create Tag 
     * @description Create Tag
     */
    post: operations["mutation.tags.create"];
    /**
     * Delete Tags 
     * @description Delete one or more Tags by their IDs
     */
    delete: operations["mutation.tags.delete"];
  };
  "/tags/count": {
    /**
     * Get Tag Count 
     * @description Get Tag Count
     */
    get: operations["query.tags.getCount"];
  };
  "/players/create": {
    /**
     * Create Player 
     * @description Creates a player with the given ID and an optional name. The ID must be unique, and ideally corresponds with a user ID used by the app integrating with 2bttns.
     */
    post: operations["mutation.players.create"];
  };
  "/players": {
    /**
     * Get All Players 
     * @description Get all players
     */
    get: operations["query.players.getAll"];
  };
  "/players/count": {
    /**
     * Get Player Count 
     * @description Get player count
     */
    get: operations["query.players.getCount"];
  };
  "/players/{id}": {
    /**
     * Get Player by ID 
     * @description Get player by ID
     */
    get: operations["query.players.getById"];
    /**
     * Update Player by ID 
     * @description Update player by ID.
     */
    put: operations["mutation.players.updateById"];
    /**
     * Delete Player by ID 
     * @description Delete player by ID
     */
    delete: operations["mutation.players.deleteById"];
  };
  "/export-data": {
    /**
     * Export Data 
     * @description Get exported 2bttns data. 
     * 
     * You can choose to export all data or only the data you need from the Game, Tag, and Game Object database tables used by 2bttns. 
     * 
     * Supports JSON format.
     */
    get: operations["query.exportData.exportData"];
  };
  "/import-data": {
    /**
     * Import Data 
     * @description Import 2bttns data from a JSON file.
     */
    post: operations["mutation.importData.importData"];
  };
  "/administrators": {
    /**
     * Get All Admins 
     * @description Get all administrators
     */
    get: operations["query.administrators.getAll"];
  };
  "/administrators/count": {
    /**
     * Get Admin Count 
     * @description Get the total number of administrators. Useful for pagination.
     */
    get: operations["query.administrators.getCount"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: never;
  responses: {
    /** @description Error response */
    error: {
      content: {
        "application/json": {
          message: string;
          code: string;
          issues?: ({
              message: string;
            })[];
        };
      };
    };
  };
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  /**
   * Say hello 
   * @description Say hello to the world
   */
  "query.example.hello": {
    parameters: {
      query?: {
        text?: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            greeting: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Create example 
   * @description Create an example object in the database
   */
  "mutation.example.create": {
    requestBody?: {
      content: {
        "application/json": {
          id?: string;
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            id: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Get all examples 
   * @description Get all examples
   */
  "query.example.getAll": {
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            examples: ({
                id: string;
                /** Format: date-time */
                createdAt: string;
                /** Format: date-time */
                updatedAt: string;
              })[];
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Get secret message 
   * @description This endpoint will return a message that tells you what type of authentication you used, if you are authenticated.
   */
  "query.example.getSecretMessage": {
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": string;
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Get All Games 
   * @description Get all Games. Paginated by default. Supports filtering and sorting.
   */
  "query.games.getAll": {
    parameters: {
      query?: {
        take?: unknown;
        skip?: unknown;
        /** @description Comma-separated Game IDs to filter by */
        idFilter?: unknown;
        /** @description Set to `true` to enable fuzzy ID filtering. If false, only returns exact matches. */
        allowFuzzyIdFilter?: boolean;
        /** @description Comma-separated Game names to filter by */
        nameFilter?: unknown;
        /** @description Set to `true` to enable fuzzy name filtering. If false, only returns exact matches. */
        allowFuzzyNameFilter?: boolean;
        /** @description Comma-separated list of input tag IDs the resulting game must have */
        tagFilter?: unknown;
        /** @description Comma-separated list of input tag IDs to exclude from the response. Use this to exclude games that have a specific input tag, even if they match the `requiredTags` filter. */
        tagExcludeFilter?: unknown;
        /**
         * @description `include`: Include all games, regardless of whether they have input tags or not. 
         * 
         * `exclude`: Exclude games that have no input tags. 
         * 
         * `untagged-only`: Only return games that have no input tags. Setting this option will ignore `requiredTags` and `excludeTags`, since tagged items shouldn't appear in the results.
         */
        untaggedFilter?: "include" | "exclude" | "untagged-only";
        /** @description Field to sort by */
        sortField?: "id" | "name" | "description" | "updatedAt" | "createdAt" | "inputTags" | "mode";
        /** @description Sort order for the selected field */
        sortOrder?: "asc" | "desc";
        /** @description Set to `true` to include additional tags info in the response */
        includeTagData?: boolean;
        /** @description Comma-separated list of Game IDs to exclude from the response */
        excludeGames?: unknown;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            games: ({
                id: string;
                name: string;
                description: string | null;
                /** @description ISO date string */
                createdAt: string;
                /** @description ISO date string */
                updatedAt: string;
                /** @description Input Tag IDs */
                inputTags: (string)[];
                mode: string;
              })[];
            tags?: ({
                id: string;
                name: string;
                description: string | null;
                /** @description ISO date string */
                createdAt: string;
                /** @description ISO date string */
                updatedAt: string;
              })[];
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Delete Games 
   * @description Delete one or more Games by their IDs
   */
  "mutation.games.delete": {
    parameters: {
      query?: {
        id?: (string)[];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            deletedCount: number;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Get Game Count 
   * @description Get Game Count
   */
  "query.games.getCount": {
    parameters: {
      query?: {
        /** @description Comma-separated Game IDs to filter by */
        idFilter?: unknown;
        /** @description Set to `true` to enable fuzzy ID filtering. If false, only returns exact matches. */
        allowFuzzyIdFilter?: boolean;
        /** @description Comma-separated Game names to filter by */
        nameFilter?: unknown;
        /** @description Set to `true` to enable fuzzy name filtering. If false, only returns exact matches. */
        allowFuzzyNameFilter?: boolean;
        /** @description Comma-separated list of input tag IDs the resulting game must have */
        tagFilter?: unknown;
        /** @description Comma-separated list of input tag IDs to exclude from the response. Use this to exclude games that have a specific input tag, even if they match the `requiredTags` filter. */
        tagExcludeFilter?: unknown;
        /**
         * @description `include`: Include all games, regardless of whether they have input tags or not. 
         * 
         * `exclude`: Exclude games that have no input tags. 
         * 
         * `untagged-only`: Only return games that have no input tags. Setting this option will ignore `requiredTags` and `excludeTags`, since tagged items shouldn't appear in the results.
         */
        untaggedFilter?: "include" | "exclude" | "untagged-only";
        /** @description Comma-separated list of Game IDs to exclude from the response */
        excludeGames?: unknown;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            count: number;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Get Player Scores 
   * @description Get a player's score data for a specific game
   */
  "query.games.getPlayerScores": {
    parameters: {
      query: {
        /** @description The game id to get scores for */
        game_id: string;
        /** @description The player id to get scores for */
        player_id: string;
        /** @description Whether to include game objects in the response */
        include_game_objects?: boolean;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            playerScores: ({
                createdAt: string;
                updatedAt: string;
                score: number;
                playerId: string;
                gameObjectId: string;
                gameObject?: {
                  id: string;
                  createdAt: string;
                  updatedAt: string;
                  name: string;
                  description: string | null;
                };
              })[];
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Get All Game Objects 
   * @description Get all Game Objects. Paginated by default. Supports filtering and sorting.
   */
  "query.gameObjects.getAll": {
    parameters: {
      query?: {
        take?: unknown;
        skip?: unknown;
        /** @description Comma-separated Game Object IDs to filter by */
        idFilter?: unknown;
        /** @description Set to `true` to enable fuzzy ID filtering. If false, only returns exact matches. */
        allowFuzzyIdFilter?: boolean;
        /** @description Comma-separated Game Object names to filter by */
        nameFilter?: unknown;
        /** @description Set to `true` to enable fuzzy name filtering. If false, only returns exact matches. */
        allowFuzzyNameFilter?: boolean;
        /** @description Comma-separated list of tag IDs the resulting game objects must have */
        tagFilter?: unknown;
        /** @description Comma-separated list of tag IDs to exclude from the response. Use this to exclude game objects that have a specific tag, even if they match the `requiredTags` filter. */
        tagExcludeFilter?: unknown;
        /**
         * @description `include`: Include all game objects, regardless of whether they have tags or not. 
         * 
         * `exclude`: Exclude game objects that have no tags. 
         * 
         * `untagged-only`: Only return game objects that have no tags. Setting this option will ignore `requiredTags` and `excludeTags`, since tagged items shouldn't appear in the results.
         */
        untaggedFilter?: "include" | "exclude" | "untagged-only";
        /** @description Field to sort by */
        sortField?: "id" | "name" | "description" | "updatedAt" | "createdAt" | "tags" | "related";
        /** @description Sort order for the selected field */
        sortOrder?: "asc" | "desc";
        /** @description Set to `true` to include additional tags info in the response */
        includeTagData?: boolean;
        /** @description Comma-separated list of Game Object IDs to exclude from the response */
        excludeGameObjects?: unknown;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            gameObjects: ({
                id: string;
                name: string;
                description: string | null;
                /** @description ISO date string */
                createdAt: string;
                /** @description ISO date string */
                updatedAt: string;
                /** @description Tag IDs */
                tags: (string)[];
                related: (string)[];
              })[];
            tags?: ({
                id: string;
                name: string;
                description: string | null;
                /** @description ISO date string */
                createdAt: string;
                /** @description ISO date string */
                updatedAt: string;
              })[];
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Delete Game Objects 
   * @description Delete one or more game objects by their IDs
   */
  "mutation.gameObjects.delete": {
    parameters: {
      query?: {
        id?: (string)[];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            deletedCount: number;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Get Game Object Count 
   * @description Get the total Game Object count. Supports filtering.
   */
  "query.gameObjects.getCount": {
    parameters: {
      query?: {
        /** @description Comma-separated Game Object IDs to filter by */
        idFilter?: unknown;
        /** @description Set to `true` to enable fuzzy ID filtering. If false, only returns exact matches. */
        allowFuzzyIdFilter?: boolean;
        /** @description Comma-separated Game Object names to filter by */
        nameFilter?: unknown;
        /** @description Set to `true` to disable fuzzy name filtering. If false, only returns exact matches. */
        allowFuzzyNameFilter?: boolean;
        /** @description Comma-separated list of tag IDs the resulting game objects must have */
        tagFilter?: unknown;
        /** @description Comma-separated list of tag IDs to exclude from the response. Use this to exclude game objects that have a specific tag, even if they match the `requiredTags` filter. */
        tagExcludeFilter?: unknown;
        /**
         * @description `include`: Include all game objects, regardless of whether they have tags or not. 
         * 
         * `exclude`: Exclude game objects that have no tags. 
         * 
         * `untagged-only`: Only return game objects that have no tags. Setting this option will ignore `requiredTags` and `excludeTags`, since tagged items shouldn't appear in the results.
         */
        untaggedFilter?: "include" | "exclude" | "untagged-only";
        /** @description Comma-separated list of Game Object IDs to exclude from the response */
        excludeGameObjects?: unknown;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            count: number;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Get Ranked Results 
   * @description Get ranked Game Object results for a player
   */
  "query.gameObjects.getRanked": {
    parameters: {
      query: {
        /** @description ID value. Only alphanumeric, underscore, and hyphen are allowed. */
        playerId: string;
        /**
         * @description Specify comma-separated input tags that will be used to score the game objects associated with the output tag.
         * 
         * If the output tag is included in the input tags, the player's score for those game object will be used as base scores
         */
        inputTags: string;
        /** @description Specify the output tag of the game objects to get ranked results for */
        outputTag: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            scores: ({
                gameObject: {
                  id: string;
                  name: string;
                };
                score: number;
              })[];
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Get All Tags 
   * @description Get all tags
   */
  "query.tags.getAll": {
    parameters: {
      query?: {
        /** @description Comma-separated tag IDs to filter by */
        idFilter?: unknown;
        /** @description Comma-separated tag names to filter by */
        nameFilter?: unknown;
        take?: unknown;
        skip?: unknown;
        /** @description Field to sort by */
        sortField?: "id" | "name" | "description" | "updatedAt" | "createdAt";
        /** @description Sort order for the selected field */
        sortOrder?: "asc" | "desc";
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            tags: ({
                id: string;
                name: string;
                description: string | null;
                /** @description ISO date string */
                createdAt: string;
                /** @description ISO date string */
                updatedAt: string;
              })[];
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Create Tag 
   * @description Create Tag
   */
  "mutation.tags.create": {
    requestBody: {
      content: {
        "application/json": {
          /** @description ID value. Only alphanumeric, underscore, and hyphen are allowed. */
          id?: string;
          name: string;
          description?: string;
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            createdTag: {
              id: string;
              name: string;
              description: string | null;
              /** @description ISO date string */
              createdAt: string;
              /** @description ISO date string */
              updatedAt: string;
            };
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Delete Tags 
   * @description Delete one or more Tags by their IDs
   */
  "mutation.tags.delete": {
    parameters: {
      query?: {
        id?: (string)[];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            deletedCount: number;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Get Tag Count 
   * @description Get Tag Count
   */
  "query.tags.getCount": {
    parameters: {
      query?: {
        /** @description Comma-separated tag IDs to filter by */
        idFilter?: unknown;
        /** @description Comma-separated tag names to filter by */
        nameFilter?: unknown;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            count: number;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Create Player 
   * @description Creates a player with the given ID and an optional name. The ID must be unique, and ideally corresponds with a user ID used by the app integrating with 2bttns.
   */
  "mutation.players.create": {
    requestBody: {
      content: {
        "application/json": {
          /** @description ID value. Only alphanumeric, underscore, and hyphen are allowed. */
          id: string;
          name?: string;
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            createdPlayer: {
              /** @description ID value. Only alphanumeric, underscore, and hyphen are allowed. */
              id: string;
              name?: string | null;
              /** @description ISO date string */
              createdAt: string;
              /** @description ISO date string */
              updatedAt: string;
            };
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Get All Players 
   * @description Get all players
   */
  "query.players.getAll": {
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            players: ({
                id: string;
                name?: string | null;
                /** @description ISO date string */
                createdAt: string;
                /** @description ISO date string */
                updatedAt: string;
              })[];
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Get Player Count 
   * @description Get player count
   */
  "query.players.getCount": {
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            count: number;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Get Player by ID 
   * @description Get player by ID
   */
  "query.players.getById": {
    parameters: {
      path: {
        /** @description ID value. Only alphanumeric, underscore, and hyphen are allowed. */
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            player: {
              id: string;
              name?: string | null;
              /** @description ISO date string */
              createdAt: string;
              /** @description ISO date string */
              updatedAt: string;
            };
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Update Player by ID 
   * @description Update player by ID.
   */
  "mutation.players.updateById": {
    parameters: {
      path: {
        /** @description ID value. Only alphanumeric, underscore, and hyphen are allowed. */
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          data?: {
            /** @description ID value. Only alphanumeric, underscore, and hyphen are allowed. */
            id?: string;
            name?: string;
          };
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            updatedPlayer: {
              id: string;
              name?: string | null;
              /** @description ISO date string */
              createdAt: string;
              /** @description ISO date string */
              updatedAt: string;
            };
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Delete Player by ID 
   * @description Delete player by ID
   */
  "mutation.players.deleteById": {
    parameters: {
      path: {
        /** @description ID value. Only alphanumeric, underscore, and hyphen are allowed. */
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            deletedPlayer: {
              id: string;
              name?: string | null;
              /** @description ISO date string */
              createdAt: string;
              /** @description ISO date string */
              updatedAt: string;
            };
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Export Data 
   * @description Get exported 2bttns data. 
   * 
   * You can choose to export all data or only the data you need from the Game, Tag, and Game Object database tables used by 2bttns. 
   * 
   * Supports JSON format.
   */
  "query.exportData.exportData": {
    parameters: {
      query?: {
        /**
         * @description Set to true to export Games. 
         * 
         * The Game data will include associated Tag IDs if `includeTags` is `true`
         */
        includeGames?: boolean;
        /**
         * @description Set to true to export Game Objects. 
         * 
         * The GameObject data will include associated Tag IDs if `includeTags` is `true`
         */
        includeGameObjects?: boolean;
        /** @description Set to true to export Tags. */
        includeTags?: boolean;
        /**
         * @description `include`: include the count of each type of data exported with the results
         * 
         * `count-only`: only return the count of each type of data that would be exported. Useful if you only want the count and not the actual data.
         * 
         * `no-count`: do not include the count
         */
        count?: "include" | "count-only" | "no-count";
        /**
         * @description Comma-separated ID list of Games to export.
         * 
         * Leave this field empty if you want the results to include all Games.
         */
        filterGameIds?: unknown;
        /**
         * @description Comma-separated ID list of GameObjects to export.
         * 
         * Leave this field empty if you want the results to include all GameObjects.
         */
        filterGameObjectIds?: unknown;
        /** @description Set to `false` to exclude GameObjects that have no tags. */
        filterAllowUntaggedGameObjects?: boolean;
        /**
         * @description Comma-separated ID list of Tags to export.
         * 
         * Leave this field empty if you want the results to include all Tags.
         */
        filterTagIds?: unknown;
        /** @description Set to `true` to only include Tags that are associated with the games that are being exported. */
        filterTagsMustBeInGames?: boolean;
        /** @description Set to `true` to only include Tags that are associated with the game objects that are being exported. */
        filterTagsMustBeInGameObjects?: boolean;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            count?: {
              games?: number;
              gameObjects?: number;
              tags?: number;
            };
            games?: ({
                id: string;
                name: string;
                description: string;
                inputTagIds?: (string)[];
              })[];
            gameObjects?: ({
                id: string;
                name: string;
                description: string;
                tagIds?: (string)[];
              })[];
            tags?: ({
                id: string;
                name: string;
                description: string;
              })[];
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Import Data 
   * @description Import 2bttns data from a JSON file.
   */
  "mutation.importData.importData": {
    requestBody: {
      content: {
        "application/json": {
          /** @description Base64 encoded JSON file to import */
          jsonBase64: string;
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            message: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Get All Admins 
   * @description Get all administrators
   */
  "query.administrators.getAll": {
    parameters: {
      query?: {
        take?: unknown;
        skip?: unknown;
        /** @description Comma-separated ids to filter by */
        idFilter?: unknown;
        /** @description Set to `true` to enable fuzzy id filtering. If false, only returns exact matches. */
        allowFuzzyIdFilter?: boolean;
        /** @description Field to sort by */
        sortField?: "id" | "displayName" | "updatedAt" | "createdAt" | "lastSeen";
        /** @description Sort order for the selected field */
        sortOrder?: "asc" | "desc";
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            administrators: ({
                id: string;
                displayName?: string;
                /** @description ISO date string */
                createdAt: string;
                /** @description ISO date string */
                updatedAt: string;
                /** @description ISO date string */
                lastSeen?: string;
              })[];
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Get Admin Count 
   * @description Get the total number of administrators. Useful for pagination.
   */
  "query.administrators.getCount": {
    parameters: {
      query?: {
        /** @description Comma-separated ids to filter by */
        idFilter?: unknown;
        /** @description Set to `true` to enable fuzzy id filtering. If false, only returns exact matches. */
        allowFuzzyIdFilter?: boolean;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            count: number;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
}
