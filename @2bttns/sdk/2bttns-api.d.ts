/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/example/hello": {
    /**
     * Say hello 
     * @description Say hello to the world
     */
    get: operations["query.example.hello"];
  };
  "/example/create": {
    /**
     * Create example 
     * @description Create an example object in the database
     */
    post: operations["mutation.example.create"];
  };
  "/example/getAll": {
    /**
     * Get all examples 
     * @description Get all examples
     */
    get: operations["query.example.getAll"];
  };
  "/example/getSecretMessage": {
    /**
     * Get secret message 
     * @description Get secret message
     */
    get: operations["query.example.getSecretMessage"];
  };
  "/games/getPlayerScores": {
    /**
     * Get Player Scores 
     * @description Get a player's score data for a specific game
     */
    get: operations["query.games.getPlayerScores"];
  };
  "/game-objects/ranked": {
    /**
     * Get Ranked Results 
     * @description Get ranked Game Object results for a player
     */
    get: operations["query.gameObjects.getRanked"];
  };
  "/tags": {
    /**
     * Get All Tags 
     * @description Get all tags
     */
    get: operations["query.tags.getAll"];
  };
  "/players/create": {
    /**
     * Create Player 
     * @description Creates a player with the given ID and an optional name. The ID must be unique, and ideally corresponds with a user ID used by the app integrating with 2bttns.
     */
    post: operations["mutation.players.create"];
  };
  "/players": {
    /**
     * Get All Players 
     * @description Get all players
     */
    get: operations["query.players.getAll"];
  };
  "/players/count": {
    /**
     * Get Player Count 
     * @description Get player count
     */
    get: operations["query.players.getCount"];
  };
  "/players/{id}": {
    /**
     * Get Player by ID 
     * @description Get player by ID
     */
    get: operations["query.players.getById"];
    /**
     * Update Player by ID 
     * @description Update player by ID.
     */
    put: operations["mutation.players.updateById"];
    /**
     * Delete Player by ID 
     * @description Delete player by ID
     */
    delete: operations["mutation.players.deleteById"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: never;
  responses: {
    /** @description Error response */
    error: {
      content: {
        "application/json": {
          message: string;
          code: string;
          issues?: ({
              message: string;
            })[];
        };
      };
    };
  };
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  "query.example.hello": {
    /**
     * Say hello 
     * @description Say hello to the world
     */
    parameters?: {
      query?: {
        text?: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            greeting: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  "mutation.example.create": {
    /**
     * Create example 
     * @description Create an example object in the database
     */
    requestBody?: {
      content: {
        "application/json": {
          id?: string;
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            id: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  "query.example.getAll": {
    /**
     * Get all examples 
     * @description Get all examples
     */
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            examples: ({
                id: string;
                /** Format: date-time */
                createdAt: string;
                /** Format: date-time */
                updatedAt: string;
              })[];
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  "query.example.getSecretMessage": {
    /**
     * Get secret message 
     * @description Get secret message
     */
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": string;
        };
      };
      default: components["responses"]["error"];
    };
  };
  "query.games.getPlayerScores": {
    /**
     * Get Player Scores 
     * @description Get a player's score data for a specific game
     */
    parameters: {
        /** @description The game id to get scores for */
        /** @description The player id to get scores for */
        /** @description Whether to include game objects in the response */
      query: {
        game_id: string;
        player_id: string;
        include_game_objects?: boolean;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            playerScores: ({
                createdAt: string;
                updatedAt: string;
                score: number;
                playerId: string;
                gameObjectId: string;
                gameObject?: {
                  id: string;
                  createdAt: string;
                  updatedAt: string;
                  name: string;
                  description: string | null;
                };
              })[];
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  "query.gameObjects.getRanked": {
    /**
     * Get Ranked Results 
     * @description Get ranked Game Object results for a player
     */
    parameters: {
        /**
         * @description Specify comma-separated input tags that will be used to score the game objects associated with the output tag.
         * 
         * If the output tag is included in the input tags, the player's score for those game object will be used as base scores
         */
        /** @description Specify the output tag of the game objects to get ranked results for */
      query: {
        playerId: string;
        inputTags: string;
        outputTag: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            scores: ({
                gameObject: {
                  id: string;
                  name: string;
                };
                score: number;
              })[];
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  "query.tags.getAll": {
    /**
     * Get All Tags 
     * @description Get all tags
     */
    parameters?: {
      query?: {
        id?: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            tags: ({
                id: string;
                name: string;
                description: string | null;
                /** @description ISO date string */
                createdAt: string;
                /** @description ISO date string */
                updatedAt: string;
              })[];
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  "mutation.players.create": {
    /**
     * Create Player 
     * @description Creates a player with the given ID and an optional name. The ID must be unique, and ideally corresponds with a user ID used by the app integrating with 2bttns.
     */
    requestBody: {
      content: {
        "application/json": {
          id: string;
          name?: string;
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            createdPlayer: {
              id: string;
              name?: string | null;
              /** @description ISO date string */
              createdAt: string;
              /** @description ISO date string */
              updatedAt: string;
            };
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  "query.players.getAll": {
    /**
     * Get All Players 
     * @description Get all players
     */
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            players: ({
                id: string;
                name?: string | null;
                /** @description ISO date string */
                createdAt: string;
                /** @description ISO date string */
                updatedAt: string;
              })[];
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  "query.players.getCount": {
    /**
     * Get Player Count 
     * @description Get player count
     */
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            count: number;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  "query.players.getById": {
    /**
     * Get Player by ID 
     * @description Get player by ID
     */
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            player: {
              id: string;
              name?: string | null;
              /** @description ISO date string */
              createdAt: string;
              /** @description ISO date string */
              updatedAt: string;
            };
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  "mutation.players.updateById": {
    /**
     * Update Player by ID 
     * @description Update player by ID.
     */
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          data?: {
            id?: string;
            name?: string;
          };
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            updatedPlayer: {
              id: string;
              name?: string | null;
              /** @description ISO date string */
              createdAt: string;
              /** @description ISO date string */
              updatedAt: string;
            };
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  "mutation.players.deleteById": {
    /**
     * Delete Player by ID 
     * @description Delete player by ID
     */
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            deletedPlayer: {
              id: string;
              name?: string | null;
              /** @description ISO date string */
              createdAt: string;
              /** @description ISO date string */
              updatedAt: string;
            };
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
}
